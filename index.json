{
  "api/Lachee.Discord.Asset.html": {
    "href": "api/Lachee.Discord.Asset.html",
    "title": "Class Asset | Utilities",
    "keywords": "Class Asset Inheritance Object Asset Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class Asset Fields image The key of the image to be displayed. Max 32 Bytes. Declaration public string image Field Value Type Description String snowflake Declaration public ulong snowflake Field Value Type Description UInt64 tooltip The tooltip of the image. Max 128 Bytes. Declaration public string tooltip Field Value Type Description String Methods IsEmpty() Is the asset object empty? Declaration public bool IsEmpty() Returns Type Description Boolean"
  },
  "api/Lachee.Discord.Attributes.CharacterLimitAttribute.html": {
    "href": "api/Lachee.Discord.Attributes.CharacterLimitAttribute.html",
    "title": "Class CharacterLimitAttribute | Utilities",
    "keywords": "Class CharacterLimitAttribute Inheritance Object CharacterLimitAttribute Namespace : Lachee.Discord.Attributes Assembly : cs.temp.dll.dll Syntax public class CharacterLimitAttribute : PropertyAttribute Constructors CharacterLimitAttribute(Int32) Declaration public CharacterLimitAttribute(int max) Parameters Type Name Description Int32 max CharacterLimitAttribute(Int32, Boolean) Declaration public CharacterLimitAttribute(int max, bool enforce) Parameters Type Name Description Int32 max Boolean enforce Fields enforce Declaration public bool enforce Field Value Type Description Boolean max Declaration public int max Field Value Type Description Int32"
  },
  "api/Lachee.Discord.Attributes.html": {
    "href": "api/Lachee.Discord.Attributes.html",
    "title": "Namespace Lachee.Discord.Attributes | Utilities",
    "keywords": "Namespace Lachee.Discord.Attributes Classes CharacterLimitAttribute"
  },
  "api/Lachee.Discord.Button.html": {
    "href": "api/Lachee.Discord.Button.html",
    "title": "Class Button | Utilities",
    "keywords": "Class Button Inheritance Object Button Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class Button Fields label The text on the button to be displayed Declaration public string label Field Value Type Description String url The tooltip of the image. Declaration public string url Field Value Type Description String Methods IsEmpty() Is the asset object empty? Declaration public bool IsEmpty() Returns Type Description Boolean"
  },
  "api/Lachee.Discord.Control.html": {
    "href": "api/Lachee.Discord.Control.html",
    "title": "Namespace Lachee.Discord.Control | Utilities",
    "keywords": "Namespace Lachee.Discord.Control Classes MessageEvents MessageEvents.CloseMessageEvent MessageEvents.ConnectionEstablishedMessageEvent MessageEvents.ConnectionFailedMessageEvent MessageEvents.ErrorMessageEvent MessageEvents.JoinMessageEvent MessageEvents.JoinRequestMessageEvent MessageEvents.PresenceMessageEvent MessageEvents.ReadyMessageEvent MessageEvents.SpectateMessageEvent MessageEvents.SubscribeMessageEvent MessageEvents.UnsubscribeMessageEvent UnityLogger This is a bridge between the Discord IPC logging and Unity Logging. Useful for debugging errors within the pipe."
  },
  "api/Lachee.Discord.Control.MessageEvents.CloseMessageEvent.html": {
    "href": "api/Lachee.Discord.Control.MessageEvents.CloseMessageEvent.html",
    "title": "Class MessageEvents.CloseMessageEvent | Utilities",
    "keywords": "Class MessageEvents.CloseMessageEvent Inheritance Object MessageEvents.CloseMessageEvent Namespace : Lachee.Discord.Control Assembly : cs.temp.dll.dll Syntax public sealed class CloseMessageEvent : UnityEvent<CloseMessage>"
  },
  "api/Lachee.Discord.Control.MessageEvents.ConnectionEstablishedMessageEvent.html": {
    "href": "api/Lachee.Discord.Control.MessageEvents.ConnectionEstablishedMessageEvent.html",
    "title": "Class MessageEvents.ConnectionEstablishedMessageEvent | Utilities",
    "keywords": "Class MessageEvents.ConnectionEstablishedMessageEvent Inheritance Object MessageEvents.ConnectionEstablishedMessageEvent Namespace : Lachee.Discord.Control Assembly : cs.temp.dll.dll Syntax public sealed class ConnectionEstablishedMessageEvent : UnityEvent<ConnectionEstablishedMessage>"
  },
  "api/Lachee.Discord.Control.MessageEvents.ConnectionFailedMessageEvent.html": {
    "href": "api/Lachee.Discord.Control.MessageEvents.ConnectionFailedMessageEvent.html",
    "title": "Class MessageEvents.ConnectionFailedMessageEvent | Utilities",
    "keywords": "Class MessageEvents.ConnectionFailedMessageEvent Inheritance Object MessageEvents.ConnectionFailedMessageEvent Namespace : Lachee.Discord.Control Assembly : cs.temp.dll.dll Syntax public sealed class ConnectionFailedMessageEvent : UnityEvent<ConnectionFailedMessage>"
  },
  "api/Lachee.Discord.Control.MessageEvents.ErrorMessageEvent.html": {
    "href": "api/Lachee.Discord.Control.MessageEvents.ErrorMessageEvent.html",
    "title": "Class MessageEvents.ErrorMessageEvent | Utilities",
    "keywords": "Class MessageEvents.ErrorMessageEvent Inheritance Object MessageEvents.ErrorMessageEvent Namespace : Lachee.Discord.Control Assembly : cs.temp.dll.dll Syntax public sealed class ErrorMessageEvent : UnityEvent<ErrorMessage>"
  },
  "api/Lachee.Discord.Control.MessageEvents.html": {
    "href": "api/Lachee.Discord.Control.MessageEvents.html",
    "title": "Class MessageEvents | Utilities",
    "keywords": "Class MessageEvents Inheritance Object MessageEvents Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord.Control Assembly : cs.temp.dll.dll Syntax public sealed class MessageEvents Fields OnClose Declaration public MessageEvents.CloseMessageEvent OnClose Field Value Type Description MessageEvents.CloseMessageEvent OnConnectionEstablished Declaration public MessageEvents.ConnectionEstablishedMessageEvent OnConnectionEstablished Field Value Type Description MessageEvents.ConnectionEstablishedMessageEvent OnConnectionFailed Declaration public MessageEvents.ConnectionFailedMessageEvent OnConnectionFailed Field Value Type Description MessageEvents.ConnectionFailedMessageEvent OnError Declaration public MessageEvents.ErrorMessageEvent OnError Field Value Type Description MessageEvents.ErrorMessageEvent OnJoin Declaration public MessageEvents.JoinMessageEvent OnJoin Field Value Type Description MessageEvents.JoinMessageEvent OnJoinRequest Declaration public MessageEvents.JoinRequestMessageEvent OnJoinRequest Field Value Type Description MessageEvents.JoinRequestMessageEvent OnPresenceUpdate Declaration public MessageEvents.PresenceMessageEvent OnPresenceUpdate Field Value Type Description MessageEvents.PresenceMessageEvent OnReady Declaration public MessageEvents.ReadyMessageEvent OnReady Field Value Type Description MessageEvents.ReadyMessageEvent OnSpectate Declaration public MessageEvents.SpectateMessageEvent OnSpectate Field Value Type Description MessageEvents.SpectateMessageEvent OnSubscribe Declaration public MessageEvents.SubscribeMessageEvent OnSubscribe Field Value Type Description MessageEvents.SubscribeMessageEvent OnUnsubscribe Declaration public MessageEvents.UnsubscribeMessageEvent OnUnsubscribe Field Value Type Description MessageEvents.UnsubscribeMessageEvent Methods RegisterEvents(DiscordRpcClient) Declaration public void RegisterEvents(DiscordRpcClient client) Parameters Type Name Description DiscordRpcClient client"
  },
  "api/Lachee.Discord.Control.MessageEvents.JoinMessageEvent.html": {
    "href": "api/Lachee.Discord.Control.MessageEvents.JoinMessageEvent.html",
    "title": "Class MessageEvents.JoinMessageEvent | Utilities",
    "keywords": "Class MessageEvents.JoinMessageEvent Inheritance Object MessageEvents.JoinMessageEvent Namespace : Lachee.Discord.Control Assembly : cs.temp.dll.dll Syntax public sealed class JoinMessageEvent : UnityEvent<JoinMessage>"
  },
  "api/Lachee.Discord.Control.MessageEvents.JoinRequestMessageEvent.html": {
    "href": "api/Lachee.Discord.Control.MessageEvents.JoinRequestMessageEvent.html",
    "title": "Class MessageEvents.JoinRequestMessageEvent | Utilities",
    "keywords": "Class MessageEvents.JoinRequestMessageEvent Inheritance Object MessageEvents.JoinRequestMessageEvent Namespace : Lachee.Discord.Control Assembly : cs.temp.dll.dll Syntax public sealed class JoinRequestMessageEvent : UnityEvent<JoinRequestMessage>"
  },
  "api/Lachee.Discord.Control.MessageEvents.PresenceMessageEvent.html": {
    "href": "api/Lachee.Discord.Control.MessageEvents.PresenceMessageEvent.html",
    "title": "Class MessageEvents.PresenceMessageEvent | Utilities",
    "keywords": "Class MessageEvents.PresenceMessageEvent Inheritance Object MessageEvents.PresenceMessageEvent Namespace : Lachee.Discord.Control Assembly : cs.temp.dll.dll Syntax public sealed class PresenceMessageEvent : UnityEvent<PresenceMessage>"
  },
  "api/Lachee.Discord.Control.MessageEvents.ReadyMessageEvent.html": {
    "href": "api/Lachee.Discord.Control.MessageEvents.ReadyMessageEvent.html",
    "title": "Class MessageEvents.ReadyMessageEvent | Utilities",
    "keywords": "Class MessageEvents.ReadyMessageEvent Inheritance Object MessageEvents.ReadyMessageEvent Namespace : Lachee.Discord.Control Assembly : cs.temp.dll.dll Syntax public sealed class ReadyMessageEvent : UnityEvent<ReadyMessage>"
  },
  "api/Lachee.Discord.Control.MessageEvents.SpectateMessageEvent.html": {
    "href": "api/Lachee.Discord.Control.MessageEvents.SpectateMessageEvent.html",
    "title": "Class MessageEvents.SpectateMessageEvent | Utilities",
    "keywords": "Class MessageEvents.SpectateMessageEvent Inheritance Object MessageEvents.SpectateMessageEvent Namespace : Lachee.Discord.Control Assembly : cs.temp.dll.dll Syntax public sealed class SpectateMessageEvent : UnityEvent<SpectateMessage>"
  },
  "api/Lachee.Discord.Control.MessageEvents.SubscribeMessageEvent.html": {
    "href": "api/Lachee.Discord.Control.MessageEvents.SubscribeMessageEvent.html",
    "title": "Class MessageEvents.SubscribeMessageEvent | Utilities",
    "keywords": "Class MessageEvents.SubscribeMessageEvent Inheritance Object MessageEvents.SubscribeMessageEvent Namespace : Lachee.Discord.Control Assembly : cs.temp.dll.dll Syntax public sealed class SubscribeMessageEvent : UnityEvent<SubscribeMessage>"
  },
  "api/Lachee.Discord.Control.MessageEvents.UnsubscribeMessageEvent.html": {
    "href": "api/Lachee.Discord.Control.MessageEvents.UnsubscribeMessageEvent.html",
    "title": "Class MessageEvents.UnsubscribeMessageEvent | Utilities",
    "keywords": "Class MessageEvents.UnsubscribeMessageEvent Inheritance Object MessageEvents.UnsubscribeMessageEvent Namespace : Lachee.Discord.Control Assembly : cs.temp.dll.dll Syntax public sealed class UnsubscribeMessageEvent : UnityEvent<UnsubscribeMessage>"
  },
  "api/Lachee.Discord.Control.UnityLogger.html": {
    "href": "api/Lachee.Discord.Control.UnityLogger.html",
    "title": "Class UnityLogger | Utilities",
    "keywords": "Class UnityLogger This is a bridge between the Discord IPC logging and Unity Logging. Useful for debugging errors within the pipe. Inheritance Object UnityLogger Namespace : Lachee.Discord.Control Assembly : cs.temp.dll.dll Syntax public sealed class UnityLogger : DiscordRPC.Logging.ILogger Properties Level Declaration public LogLevel Level { get; set; } Property Value Type Description LogLevel Methods Error(String, Object[]) Declaration public void Error(string message, params object[] args) Parameters Type Name Description String message Object [] args Info(String, Object[]) Declaration public void Info(string message, params object[] args) Parameters Type Name Description String message Object [] args Trace(String, Object[]) Declaration public void Trace(string message, params object[] args) Parameters Type Name Description String message Object [] args Warning(String, Object[]) Declaration public void Warning(string message, params object[] args) Parameters Type Name Description String message Object [] args"
  },
  "api/Lachee.Discord.DiscordAsset.html": {
    "href": "api/Lachee.Discord.DiscordAsset.html",
    "title": "Class DiscordAsset | Utilities",
    "keywords": "Class DiscordAsset Inheritance Object DiscordAsset Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Obsolete(\"The word Discord has been removed from types\", true)] public sealed class DiscordAsset"
  },
  "api/Lachee.Discord.DiscordAvatarFormat.html": {
    "href": "api/Lachee.Discord.DiscordAvatarFormat.html",
    "title": "Enum DiscordAvatarFormat | Utilities",
    "keywords": "Enum DiscordAvatarFormat The format of the discord avatars in the cache Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax public enum DiscordAvatarFormat Fields Name Description JPEG Joint Photographic Experts Group format (.jpeg) The format most cameras use. Lossy and does not support transparent avatars. PNG Portable Network Graphics format (.png) Losses format that supports transparent avatars. Most recommended for stationary formats with wide support from many libraries."
  },
  "api/Lachee.Discord.DiscordAvatarSize.html": {
    "href": "api/Lachee.Discord.DiscordAvatarSize.html",
    "title": "Enum DiscordAvatarSize | Utilities",
    "keywords": "Enum DiscordAvatarSize Possible square sizes of avatars. Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax public enum DiscordAvatarSize Fields Name Description x1024 1024 x 1024 pixels. x128 128 x 128 pixels. x16 16 x 16 pixels. x2048 2048 x 2048 pixels. x256 256 x 256 pixels. x32 32 x 32 pixels. x512 512 x 512 pixels. x64 64 x 64 pixels."
  },
  "api/Lachee.Discord.DiscordButton.html": {
    "href": "api/Lachee.Discord.DiscordButton.html",
    "title": "Class DiscordButton | Utilities",
    "keywords": "Class DiscordButton Inheritance Object DiscordButton Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Obsolete(\"The word Discord has been removed from types\", true)] public sealed class DiscordButton"
  },
  "api/Lachee.Discord.DiscordManager.html": {
    "href": "api/Lachee.Discord.DiscordManager.html",
    "title": "Class DiscordManager | Utilities",
    "keywords": "Class DiscordManager A wrapper for the Discord Sharp Client, providing useful utilities in a Unity-Friendly form. Inheritance Object DiscordManager Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax public sealed class DiscordManager : MonoBehaviour Fields applicationID Declaration public string applicationID Field Value Type Description String EXAMPLE_APPLICATION Declaration public const string EXAMPLE_APPLICATION = \"424087019149328395\" Field Value Type Description String logFile Declaration public string logFile Field Value Type Description String logLevel Declaration public DiscordRPC.Logging.LogLevel logLevel Field Value Type Description DiscordRPC.Logging.LogLevel OnClose Declaration public UnityCloseEvent OnClose Field Value Type Description UnityCloseEvent OnConnectionEstablished Declaration public UnityConnectionEstablishedEvent OnConnectionEstablished Field Value Type Description UnityConnectionEstablishedEvent OnConnectionFailed Declaration public UnityConnectionFailedEvent OnConnectionFailed Field Value Type Description UnityConnectionFailedEvent OnError Declaration public UnityErrorEvent OnError Field Value Type Description UnityErrorEvent OnJoin Declaration public UnityJoinEvent OnJoin Field Value Type Description UnityJoinEvent OnJoinRequest Declaration public UnityJoinRequestEvent OnJoinRequest Field Value Type Description UnityJoinRequestEvent OnPresence Declaration public UnityPresenceEvent OnPresence Field Value Type Description UnityPresenceEvent OnReady Declaration public UnityReadyEvent OnReady Field Value Type Description UnityReadyEvent OnSpectate Declaration public UnitySpectateEvent OnSpectate Field Value Type Description UnitySpectateEvent OnSubscribe Declaration public UnitySubscribeEvent OnSubscribe Field Value Type Description UnitySubscribeEvent OnUnsubscribe Declaration public UnityUnsubscribeEvent OnUnsubscribe Field Value Type Description UnityUnsubscribeEvent registerUriScheme Declaration public bool registerUriScheme Field Value Type Description Boolean steamID Declaration public string steamID Field Value Type Description String targetPipe Declaration public DiscordManager.Pipe targetPipe Field Value Type Description DiscordManager.Pipe Properties client The current Discord Client. Declaration public DiscordRPC.DiscordRpcClient client { get; } Property Value Type Description DiscordRPC.DiscordRpcClient current The current instance of the Discord Manager Declaration public static DiscordManager current { get; } Property Value Type Description DiscordManager CurrentPresence The current presence displayed on the Discord Client. Declaration public Presence CurrentPresence { get; } Property Value Type Description Presence CurrentSubscription The current event subscription flag. Declaration public Event CurrentSubscription { get; } Property Value Type Description Event CurrentUser The current Discord user. This does not get set until the first Ready event. Declaration public User CurrentUser { get; } Property Value Type Description User isInitialized Declaration public bool isInitialized { get; } Property Value Type Description Boolean Methods Deinitialize() If not already disposed, it will dispose and deinitialize the discord client. Declaration public void Deinitialize() Initialize() Declaration public void Initialize() ResetPresence() Resends the current Rich Presence to the Discord Client via the pipe connectoin. Declaration public void ResetPresence() Respond(JoinRequestMessage, Boolean) Resonds to a Join Request. Declaration public void Respond(JoinRequestMessage request, bool acceptRequest) Parameters Type Name Description JoinRequestMessage request The request being responded too Boolean acceptRequest The result of the request. True to accept the request. SetPresence(Presence) Sets the Rich Presence of the Discord Client through the pipe connection. This will log a error if the client is null or not yet initiated. Declaration public void SetPresence(Presence presence) Parameters Type Name Description Presence presence The Rich Presence to be shown to the client SetSubscription(Event) Sets the subscription flag, unsubscribing and then subscribing to the nessary events. Used for Join / Spectate feature. If you have not registered your application, this feature is unavailable. This will log a error if the client is null or not yet initiated. Declaration public void SetSubscription(Event evt) Parameters Type Name Description Event evt The events to subscribe too UpdateClearTime(Timestamp) Declaration public Presence UpdateClearTime(Timestamp timestamp) Parameters Type Name Description Timestamp timestamp Returns Type Description Presence UpdateDetails(String) Declaration public Presence UpdateDetails(string details) Parameters Type Name Description String details Returns Type Description Presence UpdateEndTime() Declaration public Presence UpdateEndTime() Returns Type Description Presence UpdateEndTime(Timestamp) Declaration public Presence UpdateEndTime(Timestamp timestamp) Parameters Type Name Description Timestamp timestamp Returns Type Description Presence UpdateLargeAsset(Asset) Declaration public Presence UpdateLargeAsset(Asset asset) Parameters Type Name Description Asset asset Returns Type Description Presence UpdateParty(Party) Declaration public Presence UpdateParty(Party party) Parameters Type Name Description Party party Returns Type Description Presence UpdatePartySize(Int32, Int32) Declaration public Presence UpdatePartySize(int size, int max) Parameters Type Name Description Int32 size Int32 max Returns Type Description Presence UpdateSecrets(Secrets) Declaration public Presence UpdateSecrets(Secrets secrets) Parameters Type Name Description Secrets secrets Returns Type Description Presence UpdateSmallAsset(Asset) Declaration public Presence UpdateSmallAsset(Asset asset) Parameters Type Name Description Asset asset Returns Type Description Presence UpdateStartTime() Declaration public Presence UpdateStartTime() Returns Type Description Presence UpdateStartTime(Timestamp) Declaration public Presence UpdateStartTime(Timestamp timestamp) Parameters Type Name Description Timestamp timestamp Returns Type Description Presence UpdateState(String) Declaration public Presence UpdateState(string state) Parameters Type Name Description String state Returns Type Description Presence"
  },
  "api/Lachee.Discord.DiscordManager.Pipe.html": {
    "href": "api/Lachee.Discord.DiscordManager.Pipe.html",
    "title": "Enum DiscordManager.Pipe | Utilities",
    "keywords": "Enum DiscordManager.Pipe All possible pipes discord can be found on. Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax public enum Pipe Fields Name Description FirstAvailable Pipe0 Pipe1 Pipe2 Pipe3 Pipe4 Pipe5 Pipe6 Pipe7 Pipe8 Pipe9"
  },
  "api/Lachee.Discord.DiscordParty.html": {
    "href": "api/Lachee.Discord.DiscordParty.html",
    "title": "Class DiscordParty | Utilities",
    "keywords": "Class DiscordParty Inheritance Object DiscordParty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Obsolete(\"The word Discord has been removed from types\", true)] public sealed class DiscordParty"
  },
  "api/Lachee.Discord.DiscordPresence.html": {
    "href": "api/Lachee.Discord.DiscordPresence.html",
    "title": "Class DiscordPresence | Utilities",
    "keywords": "Class DiscordPresence Inheritance Object DiscordPresence Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Obsolete(\"The word Discord has been removed from types\", true)] public sealed class DiscordPresence"
  },
  "api/Lachee.Discord.DiscordSecrets.html": {
    "href": "api/Lachee.Discord.DiscordSecrets.html",
    "title": "Struct DiscordSecrets | Utilities",
    "keywords": "Struct DiscordSecrets Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Obsolete(\"The word Discord has been removed from types\", true)] public struct DiscordSecrets"
  },
  "api/Lachee.Discord.DiscordTimestamp.html": {
    "href": "api/Lachee.Discord.DiscordTimestamp.html",
    "title": "Class DiscordTimestamp | Utilities",
    "keywords": "Class DiscordTimestamp Inheritance Object DiscordTimestamp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Obsolete(\"The word Discord has been removed from types\", true)] public sealed class DiscordTimestamp"
  },
  "api/Lachee.Discord.DiscordUser.html": {
    "href": "api/Lachee.Discord.DiscordUser.html",
    "title": "Class DiscordUser | Utilities",
    "keywords": "Class DiscordUser Inheritance Object DiscordUser Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Obsolete(\"The word Discord has been removed from types\", true)] public sealed class DiscordUser"
  },
  "api/Lachee.Discord.DiscordUserExtension.html": {
    "href": "api/Lachee.Discord.DiscordUserExtension.html",
    "title": "Class DiscordUserExtension | Utilities",
    "keywords": "Class DiscordUserExtension Collection of extensions to the class. Inheritance Object DiscordUserExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax public static class DiscordUserExtension Methods GetAvatar(DiscordRPC.User, DiscordAvatarSize, User.AvatarDownloadCallback) Gets the user avatar as a Texture2D and starts it with the supplied monobehaviour. It will first check the cache if the image exists, if it does it will return the image. Otherwise it will download the image from Discord and store it in the cache, calling the callback once done. An alias of and will return the new User instance. Declaration public static User GetAvatar(this DiscordRPC.User user, DiscordAvatarSize size = DiscordAvatarSize.x128, User.AvatarDownloadCallback callback = null) Parameters Type Name Description DiscordRPC.User user DiscordAvatarSize size The target size of the avatar. Default is 128x128 User.AvatarDownloadCallback callback The callback for when the texture completes. Default is no-callback, but its highly recommended to use a callback Returns Type Description User Returns the generated User for this object. GetAvatar(DiscordRPC.User, MonoBehaviour, DiscordAvatarSize, User.AvatarDownloadCallback) Gets the user avatar as a Texture2D and starts it with the supplied monobehaviour. It will first check the cache if the image exists, if it does it will return the image. Otherwise it will download the image from Discord and store it in the cache, calling the callback once done. An alias of and will return the new User instance. Declaration [Obsolete] public static User GetAvatar(this DiscordRPC.User user, MonoBehaviour coroutineCaller, DiscordAvatarSize size = DiscordAvatarSize.x128, User.AvatarDownloadCallback callback = null) Parameters Type Name Description DiscordRPC.User user MonoBehaviour coroutineCaller The target object that will start the coroutine DiscordAvatarSize size The target size of the avatar. Default is 128x128 User.AvatarDownloadCallback callback The callback for when the texture completes. Default is no-callback, but its highly recommended to use a callback Returns Type Description User Returns the generated User for this object. GetAvatarCoroutine(DiscordRPC.User, DiscordAvatarSize, User.AvatarDownloadCallback) Gets the user avatar as a Texture2D as a enumerator. It will first check the cache if the image exists, if it does it will return the image. Otherwise it will download the image from Discord and store it in the cache, calling the callback once done. An alias of CacheAvatarCoroutine(DiscordAvatarSize, User.AvatarDownloadCallback) and will return the new User instance in the callback. Declaration public static IEnumerator GetAvatarCoroutine(this DiscordRPC.User user, DiscordAvatarSize size = DiscordAvatarSize.x128, User.AvatarDownloadCallback callback = null) Parameters Type Name Description DiscordRPC.User user DiscordAvatarSize size The target size of the avatar. Default is 128x128 User.AvatarDownloadCallback callback The callback for when the texture completes. Default is no-callback, but its highly recommended to use a callback Returns Type Description IEnumerator GetDefaultAvatarCoroutine(DiscordRPC.User, DiscordAvatarSize, User.AvatarDownloadCallback) Gets the default avatar for the given user. Will check the cache first, and if none are available it will then download the default from discord. An alias of CacheDefaultAvatarCoroutine(DiscordAvatarSize, User.AvatarDownloadCallback) and will return the new User instance in the callback. Declaration public static IEnumerator GetDefaultAvatarCoroutine(this DiscordRPC.User user, DiscordAvatarSize size = DiscordAvatarSize.x128, User.AvatarDownloadCallback callback = null) Parameters Type Name Description DiscordRPC.User user DiscordAvatarSize size The size of the target avatar User.AvatarDownloadCallback callback The callback that will be made when the picture finishes downloading. Returns Type Description IEnumerator"
  },
  "api/Lachee.Discord.Event.html": {
    "href": "api/Lachee.Discord.Event.html",
    "title": "Enum Event | Utilities",
    "keywords": "Enum Event Events to receive from Discord Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Flags] public enum Event Fields Name Description Join Listen to Join Events JoinRequest Listen for Join Requests None No Events Spectate Listen to Spectate Events"
  },
  "api/Lachee.Discord.EventExtension.html": {
    "href": "api/Lachee.Discord.EventExtension.html",
    "title": "Class EventExtension | Utilities",
    "keywords": "Class EventExtension Inheritance Object EventExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax public static class EventExtension Methods ToDiscordRPC(Event) Declaration public static DiscordRPC.EventType ToDiscordRPC(this Event ev) Parameters Type Name Description Event ev Returns Type Description DiscordRPC.EventType ToUnity(DiscordRPC.EventType) Declaration public static Event ToUnity(this DiscordRPC.EventType type) Parameters Type Name Description DiscordRPC.EventType type Returns Type Description Event"
  },
  "api/Lachee.Discord.Events.html": {
    "href": "api/Lachee.Discord.Events.html",
    "title": "Namespace Lachee.Discord.Events | Utilities",
    "keywords": "Namespace Lachee.Discord.Events Classes JoinRequestEvent PresenceEvent ReadyEvent UnityCloseEvent UnityConnectionEstablishedEvent UnityConnectionFailedEvent UnityErrorEvent UnityJoinEvent UnityJoinRequestEvent UnityPresenceEvent UnityReadyEvent UnitySpectateEvent UnitySubscribeEvent UnityUnsubscribeEvent"
  },
  "api/Lachee.Discord.Events.JoinRequestEvent.html": {
    "href": "api/Lachee.Discord.Events.JoinRequestEvent.html",
    "title": "Class JoinRequestEvent | Utilities",
    "keywords": "Class JoinRequestEvent Inheritance Object JoinRequestEvent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord.Events Assembly : cs.temp.dll.dll Syntax public sealed class JoinRequestEvent Properties user Declaration public User user { get; } Property Value Type Description User"
  },
  "api/Lachee.Discord.Events.PresenceEvent.html": {
    "href": "api/Lachee.Discord.Events.PresenceEvent.html",
    "title": "Class PresenceEvent | Utilities",
    "keywords": "Class PresenceEvent Inheritance Object PresenceEvent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord.Events Assembly : cs.temp.dll.dll Syntax public sealed class PresenceEvent Properties applicationID Declaration public string applicationID { get; } Property Value Type Description String name Declaration public string name { get; } Property Value Type Description String presence Declaration public Presence presence { get; } Property Value Type Description Presence"
  },
  "api/Lachee.Discord.Events.ReadyEvent.html": {
    "href": "api/Lachee.Discord.Events.ReadyEvent.html",
    "title": "Class ReadyEvent | Utilities",
    "keywords": "Class ReadyEvent Inheritance Object ReadyEvent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord.Events Assembly : cs.temp.dll.dll Syntax public sealed class ReadyEvent Properties configuration Declaration public Configuration configuration { get; } Property Value Type Description Configuration user Declaration public User user { get; } Property Value Type Description User version Declaration public int version { get; } Property Value Type Description Int32"
  },
  "api/Lachee.Discord.Events.UnityCloseEvent.html": {
    "href": "api/Lachee.Discord.Events.UnityCloseEvent.html",
    "title": "Class UnityCloseEvent | Utilities",
    "keywords": "Class UnityCloseEvent Inheritance Object UnityCloseEvent Namespace : Lachee.Discord.Events Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This is a wrapper for Unity 2018\")] public class UnityCloseEvent : UnityEvent<CloseMessage>"
  },
  "api/Lachee.Discord.Events.UnityConnectionEstablishedEvent.html": {
    "href": "api/Lachee.Discord.Events.UnityConnectionEstablishedEvent.html",
    "title": "Class UnityConnectionEstablishedEvent | Utilities",
    "keywords": "Class UnityConnectionEstablishedEvent Inheritance Object UnityConnectionEstablishedEvent Namespace : Lachee.Discord.Events Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This is a wrapper for Unity 2018\")] public class UnityConnectionEstablishedEvent : UnityEvent<ConnectionEstablishedMessage>"
  },
  "api/Lachee.Discord.Events.UnityConnectionFailedEvent.html": {
    "href": "api/Lachee.Discord.Events.UnityConnectionFailedEvent.html",
    "title": "Class UnityConnectionFailedEvent | Utilities",
    "keywords": "Class UnityConnectionFailedEvent Inheritance Object UnityConnectionFailedEvent Namespace : Lachee.Discord.Events Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This is a wrapper for Unity 2018\")] public class UnityConnectionFailedEvent : UnityEvent<ConnectionFailedMessage>"
  },
  "api/Lachee.Discord.Events.UnityErrorEvent.html": {
    "href": "api/Lachee.Discord.Events.UnityErrorEvent.html",
    "title": "Class UnityErrorEvent | Utilities",
    "keywords": "Class UnityErrorEvent Inheritance Object UnityErrorEvent Namespace : Lachee.Discord.Events Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This is a wrapper for Unity 2018\")] public class UnityErrorEvent : UnityEvent<ErrorMessage>"
  },
  "api/Lachee.Discord.Events.UnityJoinEvent.html": {
    "href": "api/Lachee.Discord.Events.UnityJoinEvent.html",
    "title": "Class UnityJoinEvent | Utilities",
    "keywords": "Class UnityJoinEvent Inheritance Object UnityJoinEvent Namespace : Lachee.Discord.Events Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This is a wrapper for Unity 2018\")] public class UnityJoinEvent : UnityEvent<JoinMessage>"
  },
  "api/Lachee.Discord.Events.UnityJoinRequestEvent.html": {
    "href": "api/Lachee.Discord.Events.UnityJoinRequestEvent.html",
    "title": "Class UnityJoinRequestEvent | Utilities",
    "keywords": "Class UnityJoinRequestEvent Inheritance Object UnityJoinRequestEvent Namespace : Lachee.Discord.Events Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This is a wrapper for Unity 2018\")] public class UnityJoinRequestEvent : UnityEvent<JoinRequestEvent>"
  },
  "api/Lachee.Discord.Events.UnityPresenceEvent.html": {
    "href": "api/Lachee.Discord.Events.UnityPresenceEvent.html",
    "title": "Class UnityPresenceEvent | Utilities",
    "keywords": "Class UnityPresenceEvent Inheritance Object UnityPresenceEvent Namespace : Lachee.Discord.Events Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This is a wrapper for Unity 2018\")] public class UnityPresenceEvent : UnityEvent<PresenceEvent>"
  },
  "api/Lachee.Discord.Events.UnityReadyEvent.html": {
    "href": "api/Lachee.Discord.Events.UnityReadyEvent.html",
    "title": "Class UnityReadyEvent | Utilities",
    "keywords": "Class UnityReadyEvent Inheritance Object UnityReadyEvent Namespace : Lachee.Discord.Events Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This is a wrapper for Unity 2018\")] public class UnityReadyEvent : UnityEvent<ReadyEvent>"
  },
  "api/Lachee.Discord.Events.UnitySpectateEvent.html": {
    "href": "api/Lachee.Discord.Events.UnitySpectateEvent.html",
    "title": "Class UnitySpectateEvent | Utilities",
    "keywords": "Class UnitySpectateEvent Inheritance Object UnitySpectateEvent Namespace : Lachee.Discord.Events Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This is a wrapper for Unity 2018\")] public class UnitySpectateEvent : UnityEvent<SpectateMessage>"
  },
  "api/Lachee.Discord.Events.UnitySubscribeEvent.html": {
    "href": "api/Lachee.Discord.Events.UnitySubscribeEvent.html",
    "title": "Class UnitySubscribeEvent | Utilities",
    "keywords": "Class UnitySubscribeEvent Inheritance Object UnitySubscribeEvent Namespace : Lachee.Discord.Events Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This is a wrapper for Unity 2018\")] public class UnitySubscribeEvent : UnityEvent<SubscribeMessage>"
  },
  "api/Lachee.Discord.Events.UnityUnsubscribeEvent.html": {
    "href": "api/Lachee.Discord.Events.UnityUnsubscribeEvent.html",
    "title": "Class UnityUnsubscribeEvent | Utilities",
    "keywords": "Class UnityUnsubscribeEvent Inheritance Object UnityUnsubscribeEvent Namespace : Lachee.Discord.Events Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This is a wrapper for Unity 2018\")] public class UnityUnsubscribeEvent : UnityEvent<UnsubscribeMessage>"
  },
  "api/Lachee.Discord.html": {
    "href": "api/Lachee.Discord.html",
    "title": "Namespace Lachee.Discord | Utilities",
    "keywords": "Namespace Lachee.Discord Classes Asset Button DiscordAsset DiscordButton DiscordManager A wrapper for the Discord Sharp Client, providing useful utilities in a Unity-Friendly form. DiscordParty DiscordPresence DiscordTimestamp DiscordUser DiscordUserExtension Collection of extensions to the class. EventExtension Party Presence Timestamp A special time class that can convert all manners of time into timestamps. User Structs DiscordSecrets Secrets Enums DiscordAvatarFormat The format of the discord avatars in the cache DiscordAvatarSize Possible square sizes of avatars. DiscordManager.Pipe All possible pipes discord can be found on. Event Events to receive from Discord User.CacheLevelFlag Caching Level. This is a flag. Delegates User.AvatarDownloadCallback An event that is triggered when the avatar finishes downloading."
  },
  "api/Lachee.Discord.Party.html": {
    "href": "api/Lachee.Discord.Party.html",
    "title": "Class Party | Utilities",
    "keywords": "Class Party Inheritance Object Party Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class Party Constructors Party() Creates a new empty instance of the party Declaration public Party() Party(DiscordRPC.Party) Creates new instances of the party, using the as the base. Declaration public Party(DiscordRPC.Party party) Parameters Type Name Description DiscordRPC.Party party The base to use the values from Party(String, Int32, Int32) Creates a new instance of the party Declaration public Party(string id, int size, int max) Parameters Type Name Description String id ID of the party Int32 size Size of the party Int32 max Max Size of the party Fields identifer A unique ID for the player's current party / lobby / group. If this is not supplied, they player will not be in a party and the rest of the information will not be sent. Max 128 Bytes Declaration public string identifer Field Value Type Description String maxSize The max size of the party. Cannot be smaller than size. Declaration public int maxSize Field Value Type Description Int32 size The size of the party. Declaration public int size Field Value Type Description Int32 Methods GenerateRandomIdentifer() Generates a random party identifier Declaration public static string GenerateRandomIdentifer() Returns Type Description String IsEmpty() Returns true if the party is not valid and has no ID. Declaration public bool IsEmpty() Returns Type Description Boolean ToRichParty() Converts this object into the DiscordRPC equivilent. Declaration public DiscordRPC.Party ToRichParty() Returns Type Description DiscordRPC.Party"
  },
  "api/Lachee.Discord.Presence.html": {
    "href": "api/Lachee.Discord.Presence.html",
    "title": "Class Presence | Utilities",
    "keywords": "Class Presence Inheritance Object Presence Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class Presence Constructors Presence() Creates a new Presence object Declaration public Presence() Presence(DiscordRPC.BaseRichPresence) Creats a new Presence object, copying values of the Rich Presence Declaration public Presence(DiscordRPC.BaseRichPresence presence) Parameters Type Name Description DiscordRPC.BaseRichPresence presence The rich presence, often received by discord. Presence(DiscordRPC.RichPresence) Declaration public Presence(DiscordRPC.RichPresence presence) Parameters Type Name Description DiscordRPC.RichPresence presence Fields buttons Declaration public Button[] buttons Field Value Type Description Button [] details Declaration public string details Field Value Type Description String endTime The time the game will end in. 0 to ignore endtime. Declaration public Timestamp endTime Field Value Type Description Timestamp largeAsset Declaration public Asset largeAsset Field Value Type Description Asset party Declaration public Party party Field Value Type Description Party secrets The current secrets for the join / spectate feature. Declaration public Secrets secrets Field Value Type Description Secrets smallAsset Declaration public Asset smallAsset Field Value Type Description Asset startTime Declaration public Timestamp startTime Field Value Type Description Timestamp state The current state of the game (In Game, In Menu etc). Appears next to the party size Declaration public string state Field Value Type Description String Methods ToRichPresence() Converts this object into a new instance of a rich presence, ready to be sent to the discord client. Declaration public DiscordRPC.RichPresence ToRichPresence() Returns Type Description DiscordRPC.RichPresence A new instance of a rich presence, ready to be sent to the discord client. Operators Explicit(DiscordRPC.RichPresence to Presence) Declaration public static explicit operator Presence(DiscordRPC.RichPresence presence) Parameters Type Name Description DiscordRPC.RichPresence presence Returns Type Description Presence Explicit(Presence to DiscordRPC.RichPresence) Declaration public static explicit operator DiscordRPC.RichPresence(Presence presence) Parameters Type Name Description Presence presence Returns Type Description DiscordRPC.RichPresence"
  },
  "api/Lachee.Discord.Secrets.html": {
    "href": "api/Lachee.Discord.Secrets.html",
    "title": "Struct Secrets | Utilities",
    "keywords": "Struct Secrets Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Serializable] public struct Secrets Constructors Secrets(DiscordRPC.Secrets) Creates new instances of the secrets, using the as the base. Declaration public Secrets(DiscordRPC.Secrets secrets) Parameters Type Name Description DiscordRPC.Secrets secrets The base to use the values from Fields joinSecret The secret data that will tell the client how to connect to the game to play. This could be a unique identifier for a fancy match maker or player id, lobby id, etc. It is recommended to encrypt this information so its hard for people to replicate it. Do NOT just use the IP address in this. That is a bad practice and can leave your players vulnerable! Max Length of 128 Bytes Declaration public string joinSecret Field Value Type Description String spectateSecret The secret data that will tell the client how to connect to the game to spectate. This could be a unique identifier for a fancy match maker or player id, lobby id, etc. It is recommended to encrypt this information so its hard for people to replicate it. Do NOT just use the IP address in this. That is a bad practice and can leave your players vulnerable! Max Length of 128 Bytes Declaration public string spectateSecret Field Value Type Description String Methods IsEmpty() Is the secret object empty? Declaration public bool IsEmpty() Returns Type Description Boolean ToRichSecrets() Converts this object into the DiscordRPC equivilent. Declaration public DiscordRPC.Secrets ToRichSecrets() Returns Type Description DiscordRPC.Secrets"
  },
  "api/Lachee.Discord.Timestamp.html": {
    "href": "api/Lachee.Discord.Timestamp.html",
    "title": "Class Timestamp | Utilities",
    "keywords": "Class Timestamp A special time class that can convert all manners of time into timestamps. Inheritance Object Timestamp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class Timestamp Constructors Timestamp() Creates a new stamp of the current time. Declaration public Timestamp() Timestamp(DateTime) Creates a new stamp with the supplied datetime Declaration public Timestamp(DateTime time) Parameters Type Name Description DateTime time The DateTime Timestamp(Int64) Creates a new stamp with the specified unix epoch Declaration public Timestamp(long timestamp) Parameters Type Name Description Int64 timestamp The time in unix epoch milliseconds Timestamp(Single) Creates a new stamp that is relative to the Unity Startup time, where \"now\" is equal too . Declaration public Timestamp(float time) Parameters Type Name Description Single time The time relative to Fields Invalid Representation of a invalid timestamp (unix epoch of 0 seconds). Declaration public static readonly Timestamp Invalid Field Value Type Description Timestamp timestamp The linux epoch of the timestamp. Use conversion methods such as GetTime() to convert the time into unity relative times. This is used for implicit casting into a Int64 Declaration public long timestamp Field Value Type Description Int64 Methods AddHours(Int32) Adds hours onto the timestamp. Declaration public Timestamp AddHours(int hours) Parameters Type Name Description Int32 hours The number of hours to add Returns Type Description Timestamp Returns the same timestamp object AddHours(Single) Adds hours onto the timestamp, rounding off to the nearest second. Declaration public Timestamp AddHours(float hours) Parameters Type Name Description Single hours The fraction of hours to add Returns Type Description Timestamp Returns the same timestamp object. AddMinutes(Int32) Adds minutes onto the timestamp. Declaration public Timestamp AddMinutes(int minutes) Parameters Type Name Description Int32 minutes The number of minutes to add Returns Type Description Timestamp Returns the same timestamp object. AddMinutes(Single) Adds minutes onto the timestamp, rounding off to the nearest second. Declaration public Timestamp AddMinutes(float minutes) Parameters Type Name Description Single minutes The fraction of minutes to add Returns Type Description Timestamp Returns the same timestamp object. AddSeconds(Int32) Adds seconds onto the timestamp. Declaration public Timestamp AddSeconds(int seconds) Parameters Type Name Description Int32 seconds The number of seconds to add Returns Type Description Timestamp Returns the same timestamp object. FromUnixMilliseconds(Int64) Converts a Unix Epoch time into a . Declaration public static DateTime FromUnixMilliseconds(long unixTime) Parameters Type Name Description Int64 unixTime The time in milliseconds since 1970 / 01 / 01 Returns Type Description DateTime GetDateTime() Converts the timestamp into a This is used for implicit conversion into a Declaration public DateTime GetDateTime() Returns Type Description DateTime GetTime() Converts the timestamp into the number of seconds since the startup of the game (Unity relative), where \"now\" is equal too . This is used for implicit convertion into a Single . Declaration public float GetTime() Returns Type Description Single IsValid() Checks if the timestamp is valid (above 0 seconds relative to unix epoch). Declaration public bool IsValid() Returns Type Description Boolean Returns true if the timestamp is a non-zero epoch. ToUnixMilliseconds(DateTime) Converts a into a Unix Epoch time (in milliseconds). Declaration public static long ToUnixMilliseconds(DateTime date) Parameters Type Name Description DateTime date The datetime to convert Returns Type Description Int64 Operators Implicit(DateTime to Timestamp) Converts the into a timestamp Declaration public static implicit operator Timestamp(DateTime time) Parameters Type Name Description DateTime time The time Returns Type Description Timestamp Implicit(Timestamp to DateTime) Converts the timestamp into a representation. Declaration public static implicit operator DateTime(Timestamp stamp) Parameters Type Name Description Timestamp stamp The timestamp Returns Type Description DateTime Implicit(Timestamp to Int64) Casts the timestamp into a unix epoch count of seconds. Declaration public static implicit operator long (Timestamp stamp) Parameters Type Name Description Timestamp stamp The timestamp Returns Type Description Int64 Implicit(Timestamp to Single) Converts the timestamp into a unity epoch (start of the game time as origin) count of seconds, where is now. Declaration public static implicit operator float (Timestamp stamp) Parameters Type Name Description Timestamp stamp The timestamp Returns Type Description Single Implicit(Int64 to Timestamp) Casts a unixh epoch count of seconds into a timestamp Declaration public static implicit operator Timestamp(long time) Parameters Type Name Description Int64 time The time in milliseconds Returns Type Description Timestamp Implicit(Single to Timestamp) Converts a unity epoch (start of game time as origin) count of seconds (where is now) into a timestamp. Declaration public static implicit operator Timestamp(float time) Parameters Type Name Description Single time The time Returns Type Description Timestamp"
  },
  "api/Lachee.Discord.User.AvatarDownloadCallback.html": {
    "href": "api/Lachee.Discord.User.AvatarDownloadCallback.html",
    "title": "Delegate User.AvatarDownloadCallback | Utilities",
    "keywords": "Delegate User.AvatarDownloadCallback An event that is triggered when the avatar finishes downloading. Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax public delegate void AvatarDownloadCallback(User user, Texture2D avatar); Parameters Type Name Description User user The user the avatar belongs too Texture2D avatar The avatar that was downloaded"
  },
  "api/Lachee.Discord.User.CacheLevelFlag.html": {
    "href": "api/Lachee.Discord.User.CacheLevelFlag.html",
    "title": "Enum User.CacheLevelFlag | Utilities",
    "keywords": "Enum User.CacheLevelFlag Caching Level. This is a flag. Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Flags] public enum CacheLevelFlag Fields Name Description Hash Caches the avatars by avatar hash. None Disable all caching Size Caches the avatars by size. If off, only the largest size is stored. UserId Caches avatars by user id (required for caching to work)."
  },
  "api/Lachee.Discord.User.html": {
    "href": "api/Lachee.Discord.User.html",
    "title": "Class User | Utilities",
    "keywords": "Class User Inheritance Object User Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Discord Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class User Constructors User() Declaration public User() User(DiscordRPC.User) Declaration public User(DiscordRPC.User user) Parameters Type Name Description DiscordRPC.User user Fields CacheDirectory The current location of the avatar caches Declaration public static string CacheDirectory Field Value Type Description String CacheLevel The caching level used by the avatar functions. Note that the cache is never cleared. The cache level will help mitigate exessive file counts. None will cause no images to be cached and will be downloaded everytime they are fetched. Hash will cache images based of their hash. Without this, the avatar will likely stay the same forever. Size will cache images based of their size. Useful, but may result in multiples of the same file. Disabling this will cause all files to be x512. Declaration public static User.CacheLevelFlag CacheLevel Field Value Type Description User.CacheLevelFlag Properties avatar The current avatar cache. Will return null until GetAvatarCoroutine(DiscordAvatarSize, User.AvatarDownloadCallback) is called. Declaration public Texture2D avatar { get; } Property Value Type Description Texture2D AvatarFormat The format to download and cache avatars in. By default, PNG is used. Declaration public static DiscordAvatarFormat AvatarFormat { get; set; } Property Value Type Description DiscordAvatarFormat avatarHash The hash of the users avatar. Used to generate the URL's Declaration public string avatarHash { get; } Property Value Type Description String cacheFormat The format of the currently cached avatar Declaration public DiscordAvatarFormat cacheFormat { get; } Property Value Type Description DiscordAvatarFormat cacheSize The size of the currently cached avatar Declaration public DiscordAvatarSize cacheSize { get; } Property Value Type Description DiscordAvatarSize discrim The discriminator in a nicely formatted string. Declaration public string discrim { get; } Property Value Type Description String discriminator The discriminator of the Discord user Declaration public int discriminator { get; } Property Value Type Description Int32 ID The unique snowflake ID of the Discord user Declaration public ulong ID { get; } Property Value Type Description UInt64 username The username of the Discord user Declaration public string username { get; } Property Value Type Description String Methods CacheAvatar(MonoBehaviour, DiscordAvatarSize, User.AvatarDownloadCallback) Declaration [Obsolete(\"Now known as GetAvatar instead.\")] public void CacheAvatar(MonoBehaviour coroutineCaller, DiscordAvatarSize size = DiscordAvatarSize.x128, User.AvatarDownloadCallback callback = null) Parameters Type Name Description MonoBehaviour coroutineCaller DiscordAvatarSize size User.AvatarDownloadCallback callback CacheAvatarCoroutine(DiscordAvatarSize, User.AvatarDownloadCallback) Declaration [Obsolete(\"Now known as GetAvatarCoroutine instead.\")] public IEnumerator CacheAvatarCoroutine(DiscordAvatarSize size = DiscordAvatarSize.x128, User.AvatarDownloadCallback callback = null) Parameters Type Name Description DiscordAvatarSize size User.AvatarDownloadCallback callback Returns Type Description IEnumerator CacheDefaultAvatarCoroutine(DiscordAvatarSize, User.AvatarDownloadCallback) Declaration [Obsolete(\"Now known as GetAGetDefaultAvatarCoroutinevatar instead.\")] public IEnumerator CacheDefaultAvatarCoroutine(DiscordAvatarSize size = DiscordAvatarSize.x128, User.AvatarDownloadCallback callback = null) Parameters Type Name Description DiscordAvatarSize size User.AvatarDownloadCallback callback Returns Type Description IEnumerator Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetAvatar(DiscordAvatarSize, User.AvatarDownloadCallback) Gets the user avatar as a Texture2D and starts it with the supplied monobehaviour. It will first check the cache if the image exists, if it does it will return the image. Otherwise it will download the image from Discord and store it in the cache, calling the callback once done. Declaration public void GetAvatar(DiscordAvatarSize size = DiscordAvatarSize.x128, User.AvatarDownloadCallback callback = null) Parameters Type Name Description DiscordAvatarSize size The target size of the avatar. Default is 128x128 User.AvatarDownloadCallback callback The callback for when the texture completes. Default is no-callback, but its highly recommended to use a callback GetAvatar(MonoBehaviour, DiscordAvatarSize, User.AvatarDownloadCallback) Declaration [Obsolete(\"coroutine caller has been replaced with just the DiscordManager\")] public void GetAvatar(MonoBehaviour coroutineCaller, DiscordAvatarSize size = DiscordAvatarSize.x128, User.AvatarDownloadCallback callback = null) Parameters Type Name Description MonoBehaviour coroutineCaller DiscordAvatarSize size User.AvatarDownloadCallback callback GetAvatarCoroutine(DiscordAvatarSize, User.AvatarDownloadCallback) Gets the user avatar as a Texture2D as a enumerator. It will first check the cache if the image exists, if it does it will return the image. Otherwise it will download the image from Discord and store it in the cache, calling the callback once done. If CacheLevel has Size set, then the size will be ignored and x512 will be used instead. If CacheLevel is None , then no files will be written for cache. Declaration public IEnumerator GetAvatarCoroutine(DiscordAvatarSize size = DiscordAvatarSize.x128, User.AvatarDownloadCallback callback = null) Parameters Type Name Description DiscordAvatarSize size The target size of the avatar. Default is 128x128 User.AvatarDownloadCallback callback The callback for when the texture completes. Default is no-callback, but its highly recommended to use a callback Returns Type Description IEnumerator GetDefaultAvatarCoroutine(DiscordAvatarSize, User.AvatarDownloadCallback) Gets the default avatar for the given user. Will check the cache first, and if none are available it will then download the default from discord. If CacheLevel has Size set, then the size will be ignored and x512 will be used instead. If CacheLevel is None , then no files will be written for cache. Declaration public IEnumerator GetDefaultAvatarCoroutine(DiscordAvatarSize size = DiscordAvatarSize.x128, User.AvatarDownloadCallback callback = null) Parameters Type Name Description DiscordAvatarSize size The size of the target avatar User.AvatarDownloadCallback callback The callback that will be made when the picture finishes downloading. Returns Type Description IEnumerator GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators Implicit(DiscordRPC.User to User) Implicit casting from a DiscordRPC.User to a DiscordUser Declaration public static implicit operator User(DiscordRPC.User user) Parameters Type Name Description DiscordRPC.User user Returns Type Description User"
  },
  "api/Lachee.IO.Exceptions.html": {
    "href": "api/Lachee.IO.Exceptions.html",
    "title": "Namespace Lachee.IO.Exceptions | Utilities",
    "keywords": "Namespace Lachee.IO.Exceptions Classes NamedPipeConnectionException NamedPipeOpenException NamedPipeReadException NamedPipeWriteException"
  },
  "api/Lachee.IO.Exceptions.NamedPipeConnectionException.html": {
    "href": "api/Lachee.IO.Exceptions.NamedPipeConnectionException.html",
    "title": "Class NamedPipeConnectionException | Utilities",
    "keywords": "Class NamedPipeConnectionException Inheritance Object NamedPipeConnectionException Namespace : Lachee.IO.Exceptions Assembly : cs.temp.dll.dll Syntax public class NamedPipeConnectionException : Exception"
  },
  "api/Lachee.IO.Exceptions.NamedPipeOpenException.html": {
    "href": "api/Lachee.IO.Exceptions.NamedPipeOpenException.html",
    "title": "Class NamedPipeOpenException | Utilities",
    "keywords": "Class NamedPipeOpenException Inheritance Object NamedPipeOpenException Namespace : Lachee.IO.Exceptions Assembly : cs.temp.dll.dll Syntax public class NamedPipeOpenException : Exception Properties ErrorCode Declaration public int ErrorCode { get; } Property Value Type Description Int32"
  },
  "api/Lachee.IO.Exceptions.NamedPipeReadException.html": {
    "href": "api/Lachee.IO.Exceptions.NamedPipeReadException.html",
    "title": "Class NamedPipeReadException | Utilities",
    "keywords": "Class NamedPipeReadException Inheritance Object NamedPipeReadException Namespace : Lachee.IO.Exceptions Assembly : cs.temp.dll.dll Syntax public class NamedPipeReadException : Exception Properties ErrorCode Declaration public int ErrorCode { get; } Property Value Type Description Int32"
  },
  "api/Lachee.IO.Exceptions.NamedPipeWriteException.html": {
    "href": "api/Lachee.IO.Exceptions.NamedPipeWriteException.html",
    "title": "Class NamedPipeWriteException | Utilities",
    "keywords": "Class NamedPipeWriteException Inheritance Object NamedPipeWriteException Namespace : Lachee.IO.Exceptions Assembly : cs.temp.dll.dll Syntax public class NamedPipeWriteException : Exception Properties ErrorCode Declaration public int ErrorCode { get; } Property Value Type Description Int32"
  },
  "api/Lachee.IO.html": {
    "href": "api/Lachee.IO.html",
    "title": "Namespace Lachee.IO | Utilities",
    "keywords": "Namespace Lachee.IO Classes NamedPipeClientStream"
  },
  "api/Lachee.IO.NamedPipeClientStream.html": {
    "href": "api/Lachee.IO.NamedPipeClientStream.html",
    "title": "Class NamedPipeClientStream | Utilities",
    "keywords": "Class NamedPipeClientStream Inheritance Object MarshalByRefObject Stream NamedPipeClientStream Implements IDisposable Inherited Members Stream.Null Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, Int32) Stream.CopyToAsync(Stream, Int32, CancellationToken) Stream.CopyTo(Stream) Stream.CopyTo(Stream, Int32) Stream.Close() Stream.Dispose() Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.CreateWaitHandle() Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object) Stream.EndRead(IAsyncResult) Stream.ReadAsync(Byte[], Int32, Int32) Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken) Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object) Stream.EndWrite(IAsyncResult) Stream.WriteAsync(Byte[], Int32, Int32) Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken) Stream.Seek(Int64, SeekOrigin) Stream.ReadByte() Stream.WriteByte(Byte) Stream.Synchronized(Stream) Stream.ObjectInvariant() Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.IO Assembly : cs.temp.dll.dll Syntax public class NamedPipeClientStream : Stream, IDisposable Constructors NamedPipeClientStream(String, String) Creates a new instance of a NamedPipeClient Declaration public NamedPipeClientStream(string server, string pipeName) Parameters Type Name Description String server The remote to connect too String pipeName The name of the pipe that will be connected too. Properties CanRead Can the stream read? Always returns true. Declaration public override bool CanRead { get; } Property Value Type Description Boolean Overrides Stream.CanRead CanSeek Can the stream seek? Always returns false. Declaration public override bool CanSeek { get; } Property Value Type Description Boolean Overrides Stream.CanSeek CanWrite Can the stream write? Always returns true. Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Overrides Stream.CanWrite IsConnected Checks if the current pipe is connected and running. Declaration public bool IsConnected { get; } Property Value Type Description Boolean Length The length of the stream. Always 0. Declaration public override long Length { get; } Property Value Type Description Int64 Overrides Stream.Length PipeName The pipe name for this client. Declaration public string PipeName { get; } Property Value Type Description String Position The current position of the stream. Always 0. Declaration public override long Position { get; set; } Property Value Type Description Int64 Overrides Stream.Position Methods Connect() Attempts to open a named pipe. Declaration public void Connect() Disconnect() Closes the named pipe already opened. Declaration public void Disconnect() Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides Stream.Dispose(Boolean) Finalize() Declaration protected void Finalize() Flush() Flushes the stream. Not supported by NamedPipeClient. Declaration public override void Flush() Overrides Stream.Flush() Read(Byte[], Int32, Int32) Reads a block of bytes from a stream and writes the data to a specified buffer. Will not block if there is no data available to read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. Int32 offset The byte offset in the buffer array at which the bytes that are read will be placed. Int32 count The maximum number of bytes to read. Returns Type Description Int32 The total number of bytes that are read into buffer. This might be less than the number of bytes requested if that number of bytes is not currently available. If the value is less than 0, then a error has occured. Overrides Stream.Read(Byte[], Int32, Int32) Seek(Int64, SeekOrigin) Seeks to the given posisiton. Not supported by NamedPipeClient Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset SeekOrigin origin Returns Type Description Int64 SetLength(Int64) Sets the length of the stream. Not supported by NamedPipeClient Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value Overrides Stream.SetLength(Int64) Write(Byte[], Int32, Int32) Writes a block of bytes to the current stream using data from a buffer Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer The buffer that contains data to write to the pipe. Int32 offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. Int32 count The maximum number of bytes to write to the current stream. Overrides Stream.Write(Byte[], Int32, Int32) Implements System.IDisposable"
  },
  "index.html": {
    "href": "index.html",
    "title": "Discord RPC Unity | Utilities",
    "keywords": "Discord RPC Unity This package provides a wrapper for lachee/discord-rpc-csharp and a better experience when intergrating with Unity3D, as well as solving some tricky annoyances such as named pipes and mono. Usage Add the package to your project and look at the sample code. For more documentation about the RPC, check the discord-rpc-csharp documentation Check out the documentation at https://lachee.github.io/discord-rpc-unity/ Dependencies At least Unity 2018, however: Support is only given down to Unity 2018.4.36f1 LTS Support is only given up to the latest LTS Newtonsoft.JSON 13 This is provided by com.unity.nuget.newtonsoft-json this determines the 2018.4 min spec. You can go lower, but you need to supply your own newtonsoft.json 13.0 binary. Installation OpenUPM The openupm registry is a open source package manager for Unity and provides the openupm-cli to manage your dependencies. openupm add com.lachee.discordrpc Manual UPM Use the Unity Package Manager to add a git package. Adding the git to your UPM will limit updates as Unity will not track versioning on git projects (even though they totally could with tags). Open the Unity Package Manager and Add Package by git URL... https://github.com/Lachee/discord-rpc-unity.git For local editable versions, manually clone the repo into your package folder. Note the exact spelling on destination name. git clone https://github.com/Lachee/discord-rpc-unity.git Packages/com.lachee.discordrpc Unity Package Go old school and download the Unity Package and import it into your project. Download the .unitypackage from the Releases or via the last run Create Release action. Import that package into your Unity3D Logging By default, the DiscordManager will log to the Unity Console while in the Editor. To enable logging in builds, create a Development Build and a new discordrpc.log file will be generated with your app when it runs."
  }
}